`timescale 1ns / 1ps
module hash_function #(
    parameter DATA_WIDTH = 128,
    parameter MAIN_HASH_WIDTH = 30,
    parameter SUBSIDIARY_HASH_WIDTH = 9,
    parameter NUM_SUBSIDIARY_HASH = 6,
    parameter NUM_STAGES = 8,
    parameter LAST_STAGE_SIZE = 16
) (
    input clk,
    input rstb,
    input [DATA_WIDTH-1:0] data,
    input data_valid,
    input ready4_hash,
    output hash_valid,
    output empty,
    output ready4_data,
    output [MAIN_HASH_WIDTH-1:0] main_hash,
    output [NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH-1:0] subsidiary_hash_values
);

parameter [(NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH)*DATA_WIDTH-1:0] SEED = 10752'

localparam stage_depth = (DATA_WIDTH-LAST_STAGE_SIZE)/(NUM_STAGES-1);

wire [NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH-1:0] seeds[0:DATA_WIDTH-1];
reg [DATA_WIDTH-1:0] data_for_stages[0:NUM_STAGES-1];
reg [NUM_STAGES-1:0] valid;

genvar p;
generate
    for (p=0; p<DATA_WIDTH; p=p+1) begin:assign_seeds
        assign seeds[p] = SEED[(NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH)*(p+1)-1:(NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH)*p];
    end
endgenerate

genvar k, l;
generate
    for (k = 0; k < NUM_STAGES; k=k+1) begin:pipelines
        if (k == 0) begin
            always @* data_for_stages[k] <= data;
        end
        else begin
            always @(posedge clk or negedge rstb) begin
                if (~rstb) begin
                    data_for_stages[k] <= {DATA_WIDTH{1'b0}};
                end
                else begin
                    if (ready4_hash) data_for_stages[k] <= data_for_stages[k-1];
                end
            end
        end

        if (k < NUM_STAGES-1) begin:except_last_stage
            reg [NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH-1:0] hash[-1:stage_depth-1];

            if (k != 0) begin
                always @* hash[-1] <= pipelines[k-1].except_last_stage.hash[stage_depth-1];
            end
            else begin
                always @(posedge clk) hash[-1] <= {(NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH){1'b0}};
            end

            for (l=0; l<stage_depth; l=l+1) begin:some_name
                if (l < stage_depth-1) begin
                    always @* hash[l] <= ({(NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH){data_for_stages[k][k*stage_depth+l]}} & seeds[k*stage_depth+l]) ^ hash[l-1];
                end
                else begin
                    always @(posedge clk or negedge rstb) begin
                        if (~rstb) begin
                            hash[l] <= {(NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH){1'b0}};
                        end
                        else begin
                            if (ready4_hash) hash[l] <= ({(NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH){data_for_stages[k][k*stage_depth+l]}} & seeds[k*stage_depth+l]) ^ hash[l-1];
                        end
                    end
                end
            end
        end
        else begin:last_stage
            reg [NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH-1:0] hash[-1:LAST_STAGE_SIZE-1];

            always @* hash[-1] <= pipelines[k-1].except_last_stage.hash[stage_depth-1];

            for (l=0; l<LAST_STAGE_SIZE; l=l+1) begin:some_name
                if (l<LAST_STAGE_SIZE-1) begin
                    always @* hash[l] <=  ({(NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH){data_for_stages[k][k*stage_depth+l]}} & seeds[k*stage_depth+l]) ^ hash[l-1];
                end
                else begin
                    always @(posedge clk or negedge rstb) begin
                        if (~rstb) begin
                            hash[l] <= {(NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH){1'b0}};
                        end
                        else begin
                            if (ready4_hash) hash[l] <= ({(NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH){data_for_stages[k][k*stage_depth+l]}} & seeds[k*stage_depth+l]) ^ hash[l-1];
                        end
                    end
                end
            end
        end
    end
endgenerate

always @(posedge clk or negedge rstb) begin
    if (~rstb) begin
        valid <= 'b0;
    end
    else begin
        if (ready4_hash) valid <= {valid[NUM_STAGES-2:0], data_valid};
    end
end

assign empty = ~|(valid);

assign main_hash               = pipelines[NUM_STAGES-1].last_stage.hash[LAST_STAGE_SIZE-1][NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH+MAIN_HASH_WIDTH-1:NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH];
assign subsidiary_hash_values  = pipelines[NUM_STAGES-1].last_stage.hash[LAST_STAGE_SIZE-1][NUM_SUBSIDIARY_HASH*SUBSIDIARY_HASH_WIDTH-1:0];
assign hash_valid              = valid[NUM_STAGES-1] & ready4_hash;
assign ready4_data             = ready4_hash;

endmodule
